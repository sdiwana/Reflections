Q1: How did viewing a diff between two versions of a file help you see the bug that was introduced?
A1: Not as clear as I would have liked.  Finding the ID was tedious, do not know how you decided which was master root, seemed to imply that you have to be familiar with the actual changes made by other people.

Q2: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
A2: I am guessing you are referring to git log.  Found it confusing - can see everyone's changes, but have no clue how you kept figuring out where the change might have caused the problem, unless you are the programmer and are aware of what the other is assigned to do.
Truly, why would you allow two programmers to work on the same file at the same time?

Q3: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
A3: Makes it pretty risky.  Basically programmer has to keep saving, sometimes even small change are very important.

Q4:Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
A4: I believe GIT is allowing you to combine logical changes.

Q5: How can you use the commands git log and git diff to view the history of files?
A5: Use git log to get the commit ids and the history of the file, then do git diff to see the actual changes between two commits.

Q6: How might using version control make you more confident to make changes that could break something?
A6: Good, but the manual commit still leaves you somewhat not fully confident.

Q7: Now that you have your workspace set up, what do you want to try using Git for?
A6: Initially use it for my projects, and then for work.